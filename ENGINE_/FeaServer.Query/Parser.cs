//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FeaServer.Query {
    using System;
    using System.Diagnostics;
    using System.Runtime.InteropServices;
    
    // The following table contains information about every rule that is used during the reduce.
    public class Parser : System.IDisposable {
        protected const int NOCODE = 170;
        protected const int WILDCARD = 25;
        protected const int STATES = 300;
        protected const int ERRORSYMBOL = 0;
        private string _tracePrompt;
        #region Trace: Token Names
        protected static string[] _tokenNames = new string[] {
                "$",
                "SEMI",
                "EXPLAIN",
                "QUERY",
                "PLAN",
                "BEGIN",
                "TRANSACTION",
                "DEFERRED",
                "IMMEDIATE",
                "EXCLUSIVE",
                "COMMIT",
                "END",
                "ROLLBACK",
                "TABLE",
                "CREATE",
                "IF",
                "NOT",
                "EXISTS",
                "TEMP",
                "LP",
                "RP",
                "AS",
                "COMMA",
                "ID",
                "ABORT",
                "ANY",
                "OR",
                "AND",
                "IS",
                "MATCH",
                "LIKE_KW",
                "BETWEEN",
                "IN",
                "ISNULL",
                "NOTNULL",
                "NE",
                "EQ",
                "GT",
                "LE",
                "LT",
                "GE",
                "ESCAPE",
                "BITAND",
                "BITOR",
                "LSHIFT",
                "RSHIFT",
                "PLUS",
                "MINUS",
                "STAR",
                "SLASH",
                "REM",
                "CONCAT",
                "COLLATE",
                "BITNOT",
                "STRING",
                "JOIN_KW",
                "DROP",
                "SELECT",
                "DOT",
                "FROM",
                "JOIN",
                "ON",
                "INDEXED",
                "BY",
                "USING",
                "ORDER",
                "ASC",
                "DESC",
                "GROUP",
                "HAVING",
                "LIMIT",
                "OFFSET",
                "DELETE",
                "WHERE",
                "UPDATE",
                "SET",
                "INTO",
                "VALUES",
                "DEFAULT",
                "INSERT",
                "REPLACE",
                "NULL",
                "INTEGER",
                "FLOAT",
                "BLOB",
                "REGISTER",
                "VARIABLE",
                "CTIME_KW",
                "CASE",
                "WHEN",
                "THEN",
                "ELSE",
                "ALTER",
                "RENAME",
                "TO",
                "ADD",
                "COLUMNKW",
                "error",
                "input",
                "cmdlist",
                "ecmd",
                "explain",
                "cmdx",
                "cmd",
                "transtype",
                "trans_opt",
                "nm",
                "create_table",
                "create_table_args",
                "createkw",
                "temp",
                "ifnotexists",
                "dbnm",
                "columnlist",
                "conslist_opt",
                "select",
                "column",
                "columnid",
                "type",
                "carglist",
                "id",
                "ids",
                "typetoken",
                "typename",
                "signed",
                "plus_num",
                "minus_num",
                "ifexists",
                "fullname",
                "oneselect",
                "selcollist",
                "from",
                "where_opt",
                "groupby_opt",
                "having_opt",
                "orderby_opt",
                "limit_opt",
                "sclp",
                "expr",
                "as",
                "seltablist",
                "stl_prefix",
                "joinop",
                "indexed_opt",
                "on_opt",
                "using_opt",
                "joinop2",
                "inscollist",
                "sortlist",
                "sortitem",
                "sortorder",
                "nexprlist",
                "orconf",
                "setlist",
                "insert_cmd",
                "inscollist_opt",
                "itemlist",
                "term",
                "distinct",
                "exprlist",
                "likeop",
                "between_op",
                "case_operand",
                "case_exprlist",
                "case_else",
                "plus_opt",
                "number",
                "add_column_fullname",
                "kwcolumn_opt"};
        #endregion
        #region Trace: Rule Names
        protected static string[] _ruleNames = new string[] {
                "input ::= cmdlist",
                "cmdlist ::= cmdlist ecmd",
                "cmdlist ::= ecmd",
                "ecmd ::= SEMI",
                "ecmd ::= explain cmdx SEMI",
                "explain ::=",
                "explain ::= EXPLAIN",
                "explain ::= EXPLAIN QUERY PLAN",
                "cmdx ::= cmd",
                "cmd ::= BEGIN transtype trans_opt",
                "trans_opt ::=",
                "trans_opt ::= TRANSACTION",
                "trans_opt ::= TRANSACTION nm",
                "transtype ::=",
                "transtype ::= DEFERRED",
                "transtype ::= IMMEDIATE",
                "transtype ::= EXCLUSIVE",
                "cmd ::= COMMIT trans_opt",
                "cmd ::= END trans_opt",
                "cmd ::= ROLLBACK trans_opt",
                "cmd ::= create_table create_table_args",
                "create_table ::= createkw temp TABLE ifnotexists nm dbnm",
                "createkw ::= CREATE",
                "ifnotexists ::=",
                "ifnotexists ::= IF NOT EXISTS",
                "temp ::= TEMP",
                "temp ::=",
                "create_table_args ::= LP columnlist conslist_opt RP",
                "create_table_args ::= AS select",
                "columnlist ::= columnlist COMMA column",
                "columnlist ::= column",
                "column ::= columnid type carglist",
                "columnid ::= nm",
                "id ::= ID",
                "ids ::= ID|STRING",
                "nm ::= id",
                "nm ::= STRING",
                "nm ::= JOIN_KW",
                "type ::=",
                "type ::= typetoken",
                "typetoken ::= typename",
                "typetoken ::= typename LP signed RP",
                "typetoken ::= typename LP signed COMMA signed RP",
                "typename ::= ids",
                "typename ::= typename ids",
                "signed ::= plus_num",
                "signed ::= minus_num",
                "cmd ::= DROP TABLE ifexists fullname",
                "ifexists ::= IF EXISTS",
                "ifexists ::=",
                "cmd ::= select",
                "select ::= oneselect",
                "oneselect ::= SELECT selcollist from where_opt groupby_opt having_opt orderby_opt" +
                    " limit_opt",
                "sclp ::= selcollist COMMA",
                "sclp ::=",
                "selcollist ::= sclp expr as",
                "selcollist ::= sclp STAR",
                "selcollist ::= sclp nm DOT STAR",
                "as ::= AS nm",
                "as ::= ids",
                "as ::=",
                "from ::=",
                "from ::= FROM seltablist",
                "stl_prefix ::= seltablist joinop",
                "stl_prefix ::=",
                "seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt",
                "dbnm ::=",
                "dbnm ::= DOT nm",
                "fullname ::= nm dbnm",
                "joinop ::= COMMA|JOIN",
                "joinop ::= JOIN_KW JOIN",
                "joinop ::= JOIN_KW nm JOIN",
                "joinop ::= JOIN_KW nm nm JOIN",
                "on_opt ::= ON expr",
                "on_opt ::=",
                "indexed_opt ::=",
                "indexed_opt ::= INDEXED BY nm",
                "indexed_opt ::= NOT INDEXED",
                "using_opt ::= USING LP inscollist RP",
                "using_opt ::=",
                "orderby_opt ::=",
                "orderby_opt ::= ORDER BY sortlist",
                "sortlist ::= sortlist COMMA sortitem sortorder",
                "sortlist ::= sortitem sortorder",
                "sortitem ::= expr",
                "sortorder ::= ASC",
                "sortorder ::= DESC",
                "sortorder ::=",
                "groupby_opt ::=",
                "groupby_opt ::= GROUP BY nexprlist",
                "having_opt ::=",
                "having_opt ::= HAVING expr",
                "limit_opt ::=",
                "limit_opt ::= LIMIT expr",
                "limit_opt ::= LIMIT expr OFFSET expr",
                "limit_opt ::= LIMIT expr COMMA expr",
                "cmd ::= DELETE FROM fullname indexed_opt where_opt",
                "where_opt ::=",
                "where_opt ::= WHERE expr",
                "cmd ::= UPDATE orconf fullname indexed_opt SET setlist where_opt",
                "setlist ::= setlist COMMA nm EQ expr",
                "setlist ::= nm EQ expr",
                "cmd ::= insert_cmd INTO fullname inscollist_opt VALUES LP itemlist RP",
                "cmd ::= insert_cmd INTO fullname inscollist_opt select",
                "cmd ::= insert_cmd INTO fullname inscollist_opt DEFAULT VALUES",
                "insert_cmd ::= INSERT orconf",
                "insert_cmd ::= REPLACE",
                "itemlist ::= itemlist COMMA expr",
                "itemlist ::= expr",
                "inscollist_opt ::=",
                "inscollist_opt ::= LP inscollist RP",
                "inscollist ::= inscollist COMMA nm",
                "inscollist ::= nm",
                "expr ::= term",
                "expr ::= LP expr RP",
                "term ::= NULL",
                "expr ::= id",
                "expr ::= JOIN_KW",
                "expr ::= nm DOT nm",
                "expr ::= nm DOT nm DOT nm",
                "term ::= INTEGER|FLOAT|BLOB",
                "term ::= STRING",
                "expr ::= REGISTER",
                "expr ::= VARIABLE",
                "expr ::= ID LP distinct exprlist RP",
                "expr ::= ID LP STAR RP",
                "term ::= CTIME_KW",
                "expr ::= expr AND expr",
                "expr ::= expr OR expr",
                "expr ::= expr LT|GT|GE|LE expr",
                "expr ::= expr EQ|NE expr",
                "expr ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr",
                "expr ::= expr PLUS|MINUS expr",
                "expr ::= expr STAR|SLASH|REM expr",
                "expr ::= expr CONCAT expr",
                "likeop ::= LIKE_KW",
                "likeop ::= NOT LIKE_KW",
                "likeop ::= MATCH",
                "likeop ::= NOT MATCH",
                "expr ::= expr likeop expr",
                "expr ::= expr likeop expr ESCAPE expr",
                "expr ::= expr ISNULL|NOTNULL",
                "expr ::= expr NOT NULL",
                "expr ::= expr IS expr",
                "expr ::= expr IS NOT expr",
                "expr ::= NOT expr",
                "expr ::= BITNOT expr",
                "expr ::= MINUS expr",
                "expr ::= PLUS expr",
                "between_op ::= BETWEEN",
                "between_op ::= NOT BETWEEN",
                "expr ::= expr between_op expr AND expr",
                "expr ::= CASE case_operand case_exprlist case_else END",
                "case_exprlist ::= case_exprlist WHEN expr THEN expr",
                "case_exprlist ::= WHEN expr THEN expr",
                "case_else ::= ELSE expr",
                "case_else ::=",
                "case_operand ::= expr",
                "case_operand ::=",
                "exprlist ::= nexprlist",
                "exprlist ::=",
                "nexprlist ::= nexprlist COMMA expr",
                "nexprlist ::= expr",
                "plus_num ::= plus_opt number",
                "minus_num ::= MINUS number",
                "number ::= INTEGER|FLOAT",
                "plus_opt ::= PLUS",
                "plus_opt ::=",
                "cmd ::= ALTER TABLE fullname RENAME TO nm",
                "cmd ::= ALTER TABLE add_column_fullname ADD kwcolumn_opt column",
                "add_column_fullname ::= fullname",
                "kwcolumn_opt ::=",
                "kwcolumn_opt ::= COLUMNKW"};
        #endregion
        protected static Minor _zeroMinor;
        protected const int ACTIONS = 781;
        #region Tables: Actions
        protected static ushort[] _actions = new ushort[] {
                156,
                36,
                36,
                36,
                35,
                101,
                279,
                279,
                293,
                126,
                41,
                42,
                32,
                249,
                254,
                247,
                10,
                248,
                248,
                39,
                39,
                40,
                40,
                40,
                40,
                297,
                38,
                38,
                38,
                38,
                37,
                37,
                36,
                36,
                36,
                35,
                156,
                279,
                279,
                291,
                290,
                293,
                17,
                272,
                272,
                236,
                41,
                42,
                32,
                249,
                254,
                247,
                293,
                248,
                248,
                39,
                39,
                40,
                40,
                40,
                40,
                282,
                38,
                38,
                38,
                38,
                37,
                37,
                36,
                36,
                36,
                35,
                291,
                290,
                277,
                156,
                48,
                222,
                235,
                261,
                289,
                288,
                287,
                291,
                290,
                41,
                42,
                32,
                249,
                254,
                247,
                18,
                248,
                248,
                39,
                39,
                40,
                40,
                40,
                40,
                276,
                38,
                38,
                38,
                38,
                37,
                37,
                36,
                36,
                36,
                35,
                156,
                37,
                37,
                36,
                36,
                36,
                35,
                300,
                298,
                162,
                41,
                42,
                32,
                249,
                254,
                247,
                142,
                248,
                248,
                39,
                39,
                40,
                40,
                40,
                40,
                265,
                38,
                38,
                38,
                38,
                37,
                37,
                36,
                36,
                36,
                35,
                156,
                155,
                228,
                264,
                268,
                278,
                117,
                230,
                239,
                100,
                41,
                42,
                32,
                249,
                254,
                247,
                292,
                248,
                248,
                39,
                39,
                40,
                40,
                40,
                40,
                335,
                38,
                38,
                38,
                38,
                37,
                37,
                36,
                36,
                36,
                35,
                156,
                211,
                24,
                11,
                160,
                275,
                274,
                159,
                246,
                110,
                41,
                30,
                32,
                249,
                254,
                247,
                336,
                248,
                248,
                39,
                39,
                40,
                40,
                40,
                40,
                337,
                38,
                38,
                38,
                38,
                37,
                37,
                36,
                36,
                36,
                35,
                156,
                96,
                21,
                474,
                107,
                201,
                1,
                242,
                241,
                128,
                41,
                42,
                32,
                249,
                254,
                247,
                105,
                248,
                248,
                39,
                39,
                40,
                40,
                40,
                40,
                104,
                38,
                38,
                38,
                38,
                37,
                37,
                36,
                36,
                36,
                35,
                156,
                38,
                38,
                38,
                38,
                37,
                37,
                36,
                36,
                36,
                35,
                42,
                32,
                249,
                254,
                247,
                15,
                248,
                248,
                39,
                39,
                40,
                40,
                40,
                40,
                245,
                38,
                38,
                38,
                38,
                37,
                37,
                36,
                36,
                36,
                35,
                156,
                34,
                31,
                252,
                253,
                250,
                208,
                237,
                100,
                198,
                275,
                274,
                32,
                249,
                254,
                247,
                19,
                248,
                248,
                39,
                39,
                40,
                40,
                40,
                40,
                180,
                38,
                38,
                38,
                38,
                37,
                37,
                36,
                36,
                36,
                35,
                29,
                193,
                133,
                43,
                92,
                270,
                127,
                197,
                115,
                237,
                29,
                267,
                193,
                43,
                128,
                196,
                292,
                197,
                148,
                251,
                20,
                266,
                50,
                43,
                217,
                292,
                196,
                197,
                168,
                167,
                26,
                27,
                223,
                73,
                8,
                181,
                109,
                28,
                195,
                194,
                26,
                27,
                193,
                232,
                69,
                244,
                189,
                28,
                195,
                194,
                26,
                27,
                262,
                2,
                190,
                124,
                196,
                28,
                195,
                194,
                25,
                122,
                23,
                262,
                6,
                260,
                258,
                258,
                258,
                257,
                256,
                255,
                7,
                5,
                58,
                260,
                258,
                258,
                258,
                257,
                256,
                255,
                7,
                116,
                103,
                260,
                258,
                258,
                258,
                257,
                256,
                255,
                7,
                262,
                234,
                40,
                40,
                40,
                40,
                33,
                38,
                38,
                38,
                38,
                37,
                37,
                36,
                36,
                36,
                35,
                40,
                40,
                40,
                40,
                193,
                38,
                38,
                38,
                38,
                37,
                37,
                36,
                36,
                36,
                35,
                118,
                57,
                193,
                196,
                193,
                151,
                150,
                149,
                232,
                218,
                200,
                296,
                293,
                193,
                99,
                129,
                196,
                137,
                196,
                267,
                226,
                69,
                90,
                214,
                133,
                233,
                224,
                196,
                133,
                281,
                50,
                186,
                123,
                292,
                77,
                136,
                73,
                264,
                292,
                292,
                262,
                176,
                292,
                291,
                290,
                62,
                121,
                34,
                31,
                184,
                165,
                175,
                115,
                262,
                220,
                262,
                193,
                134,
                141,
                193,
                299,
                1,
                169,
                158,
                262,
                298,
                162,
                173,
                267,
                154,
                196,
                193,
                193,
                196,
                153,
                206,
                210,
                215,
                204,
                50,
                193,
                193,
                292,
                193,
                193,
                196,
                196,
                166,
                61,
                163,
                264,
                81,
                193,
                55,
                196,
                196,
                53,
                196,
                196,
                52,
                101,
                4,
                279,
                79,
                88,
                193,
                196,
                262,
                13,
                12,
                262,
                46,
                87,
                89,
                193,
                93,
                108,
                209,
                161,
                196,
                164,
                130,
                262,
                262,
                114,
                193,
                193,
                94,
                196,
                202,
                193,
                262,
                262,
                279,
                262,
                262,
                193,
                82,
                193,
                196,
                196,
                193,
                54,
                262,
                196,
                133,
                86,
                193,
                280,
                228,
                196,
                295,
                196,
                207,
                106,
                196,
                262,
                85,
                78,
                292,
                286,
                196,
                84,
                292,
                285,
                262,
                284,
                120,
                80,
                193,
                113,
                193,
                199,
                112,
                193,
                47,
                262,
                262,
                15,
                111,
                193,
                262,
                193,
                196,
                146,
                196,
                193,
                262,
                196,
                262,
                157,
                193,
                262,
                49,
                196,
                193,
                196,
                279,
                262,
                294,
                196,
                60,
                193,
                76,
                145,
                196,
                75,
                170,
                185,
                196,
                133,
                144,
                59,
                292,
                74,
                16,
                196,
                187,
                83,
                143,
                262,
                292,
                262,
                72,
                292,
                262,
                193,
                71,
                279,
                193,
                193,
                262,
                131,
                262,
                70,
                193,
                263,
                262,
                193,
                44,
                196,
                193,
                262,
                196,
                196,
                192,
                262,
                188,
                3,
                196,
                179,
                259,
                196,
                262,
                119,
                196,
                22,
                140,
                68,
                292,
                125,
                67,
                66,
                98,
                196,
                292,
                102,
                65,
                14,
                229,
                64,
                292,
                138,
                63,
                227,
                231,
                225,
                262,
                182,
                219,
                262,
                262,
                9,
                292,
                135,
                178,
                262,
                97,
                292,
                262,
                292,
                177,
                262,
                171,
                205,
                91,
                183,
                221,
                292,
                56,
                174,
                262,
                95,
                216,
                45,
                213,
                51,
                292,
                292,
                292,
                292,
                203,
                283,
                147,
                243,
                273,
                271,
                152,
                212,
                191,
                139,
                240,
                132,
                172,
                269,
                238,
                115,
                475,
                35};
        #endregion
        protected const int NO_ACTION = 475;
        protected const int ACCEPT_ACTION = 474;
        protected const int ERROR_ACTION = 473;
        #region Tables: Lookaheads
        protected static byte[] _lookaheads = new byte[] {
                16,
                48,
                49,
                50,
                51,
                21,
                23,
                23,
                23,
                130,
                26,
                27,
                28,
                29,
                30,
                31,
                137,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                1,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                16,
                54,
                54,
                54,
                55,
                23,
                22,
                82,
                83,
                60,
                26,
                27,
                28,
                29,
                30,
                31,
                23,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                20,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                54,
                55,
                20,
                16,
                22,
                48,
                60,
                20,
                7,
                8,
                9,
                54,
                55,
                26,
                27,
                28,
                29,
                30,
                31,
                71,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                20,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                16,
                46,
                47,
                48,
                49,
                50,
                51,
                0,
                1,
                2,
                26,
                27,
                28,
                29,
                30,
                31,
                19,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                115,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                16,
                118,
                106,
                129,
                121,
                122,
                123,
                20,
                22,
                22,
                26,
                27,
                28,
                29,
                30,
                31,
                120,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                58,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                16,
                20,
                90,
                22,
                124,
                125,
                126,
                147,
                11,
                59,
                26,
                27,
                28,
                29,
                30,
                31,
                58,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                58,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                16,
                22,
                90,
                98,
                99,
                100,
                101,
                66,
                67,
                165,
                26,
                27,
                28,
                29,
                30,
                31,
                58,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                58,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                16,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                27,
                28,
                29,
                30,
                31,
                73,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                20,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                16,
                160,
                161,
                29,
                30,
                31,
                20,
                22,
                22,
                124,
                125,
                126,
                28,
                29,
                30,
                31,
                22,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                16,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                16,
                106,
                106,
                19,
                55,
                46,
                47,
                23,
                57,
                60,
                16,
                106,
                106,
                19,
                165,
                120,
                120,
                23,
                113,
                81,
                16,
                116,
                117,
                19,
                128,
                120,
                120,
                23,
                77,
                78,
                46,
                47,
                48,
                138,
                19,
                62,
                21,
                53,
                54,
                55,
                46,
                47,
                106,
                121,
                138,
                20,
                151,
                53,
                54,
                55,
                46,
                47,
                157,
                63,
                159,
                149,
                120,
                53,
                54,
                55,
                89,
                139,
                91,
                157,
                22,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                63,
                138,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                140,
                141,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                157,
                60,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                37,
                38,
                39,
                40,
                106,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                5,
                19,
                106,
                120,
                106,
                10,
                11,
                12,
                121,
                14,
                102,
                103,
                23,
                106,
                63,
                107,
                120,
                109,
                120,
                106,
                62,
                138,
                58,
                115,
                106,
                106,
                139,
                120,
                106,
                116,
                117,
                148,
                149,
                120,
                138,
                13,
                138,
                129,
                120,
                120,
                157,
                16,
                120,
                54,
                55,
                138,
                128,
                160,
                161,
                151,
                128,
                56,
                57,
                157,
                17,
                157,
                106,
                13,
                162,
                106,
                100,
                101,
                154,
                156,
                157,
                1,
                2,
                72,
                106,
                74,
                120,
                106,
                106,
                120,
                79,
                80,
                115,
                17,
                116,
                117,
                106,
                106,
                120,
                106,
                106,
                120,
                120,
                92,
                138,
                167,
                129,
                138,
                106,
                59,
                120,
                120,
                75,
                120,
                120,
                76,
                21,
                19,
                23,
                138,
                138,
                106,
                120,
                157,
                36,
                36,
                157,
                13,
                138,
                138,
                106,
                138,
                138,
                77,
                3,
                120,
                93,
                95,
                157,
                157,
                138,
                106,
                106,
                94,
                120,
                4,
                106,
                157,
                157,
                54,
                157,
                157,
                106,
                138,
                106,
                120,
                120,
                106,
                152,
                157,
                120,
                106,
                138,
                106,
                119,
                106,
                120,
                105,
                120,
                152,
                6,
                120,
                157,
                138,
                138,
                120,
                105,
                120,
                138,
                120,
                105,
                157,
                105,
                128,
                138,
                106,
                138,
                106,
                114,
                138,
                106,
                22,
                157,
                157,
                73,
                138,
                106,
                157,
                106,
                120,
                132,
                120,
                106,
                157,
                120,
                157,
                147,
                106,
                157,
                19,
                120,
                106,
                120,
                23,
                157,
                106,
                120,
                138,
                106,
                138,
                133,
                120,
                138,
                106,
                68,
                120,
                106,
                134,
                138,
                120,
                138,
                69,
                120,
                65,
                138,
                135,
                157,
                120,
                157,
                138,
                120,
                157,
                106,
                138,
                54,
                106,
                106,
                157,
                128,
                157,
                138,
                106,
                136,
                157,
                106,
                70,
                120,
                106,
                157,
                120,
                120,
                106,
                157,
                48,
                158,
                120,
                106,
                106,
                120,
                157,
                153,
                120,
                89,
                106,
                138,
                120,
                163,
                138,
                138,
                58,
                120,
                120,
                112,
                138,
                61,
                106,
                138,
                120,
                144,
                138,
                106,
                145,
                106,
                157,
                64,
                18,
                157,
                157,
                138,
                120,
                106,
                110,
                157,
                111,
                120,
                157,
                120,
                15,
                157,
                106,
                106,
                106,
                106,
                112,
                120,
                127,
                15,
                157,
                155,
                112,
                168,
                132,
                19,
                120,
                120,
                120,
                120,
                96,
                108,
                131,
                150,
                166,
                166,
                104,
                132,
                164,
                143,
                150,
                143,
                143,
                121,
                142,
                57,
                169,
                51};
        #endregion
        protected const int SHIFT_USE_DFLT = -48;
        protected const int SHIFT_COUNT = 200;
        protected const int SHIFT_MIN = -47;
        protected const int SHIFT_MAX = 739;
        #region Tables: Shift Offsets
        protected static short[] _shift_ofsts = new short[] {
                516,
                447,
                321,
                321,
                321,
                321,
                321,
                321,
                441,
                -16,
                311,
                321,
                321,
                321,
                321,
                321,
                321,
                321,
                321,
                321,
                321,
                321,
                321,
                321,
                321,
                321,
                321,
                321,
                321,
                321,
                321,
                321,
                331,
                321,
                321,
                321,
                321,
                321,
                321,
                321,
                321,
                321,
                321,
                321,
                321,
                441,
                441,
                441,
                286,
                286,
                -17,
                441,
                441,
                441,
                441,
                441,
                441,
                441,
                20,
                131,
                95,
                59,
                203,
                203,
                203,
                203,
                203,
                203,
                203,
                203,
                203,
                203,
                203,
                203,
                203,
                203,
                203,
                203,
                167,
                239,
                275,
                275,
                385,
                400,
                400,
                400,
                400,
                400,
                214,
                66,
                29,
                18,
                -15,
                -47,
                441,
                278,
                441,
                441,
                441,
                441,
                441,
                441,
                531,
                441,
                441,
                441,
                441,
                118,
                729,
                721,
                -48,
                -48,
                -48,
                -48,
                -48,
                -48,
                276,
                626,
                73,
                198,
                300,
                300,
                300,
                160,
                160,
                298,
                133,
                -39,
                -39,
                342,
                667,
                739,
                557,
                657,
                737,
                657,
                728,
                713,
                666,
                659,
                657,
                619,
                651,
                621,
                604,
                598,
                592,
                557,
                605,
                600,
                600,
                600,
                600,
                -48,
                -48,
                -48,
                265,
                277,
                164,
                134,
                54,
                577,
                567,
                478,
                485,
                479,
                550,
                492,
                534,
                475,
                525,
                524,
                473,
                486,
                512,
                496,
                489,
                477,
                474,
                416,
                410,
                403,
                434,
                361,
                285,
                337,
                369,
                317,
                352,
                285,
                260,
                180,
                186,
                177,
                150,
                141,
                114,
                108,
                80,
                41,
                24};
        #endregion
        protected const int REDUCE_USE_DFLT = -122;
        protected const int REDUCE_COUNT = 155;
        protected const int REDUCE_MIN = -121;
        protected const int REDUCE_MAX = 665;
        #region Tables: Reduce Offsets
        protected static short[] _reduce_ofsts = new short[] {
                124,
                360,
                335,
                222,
                359,
                350,
                233,
                348,
                232,
                339,
                596,
                587,
                584,
                581,
                576,
                575,
                572,
                548,
                541,
                537,
                532,
                528,
                526,
                520,
                517,
                515,
                493,
                487,
                484,
                482,
                476,
                472,
                471,
                460,
                451,
                438,
                430,
                429,
                427,
                426,
                418,
                417,
                405,
                402,
                263,
                414,
                374,
                365,
                176,
                63,
                30,
                495,
                556,
                553,
                491,
                370,
                223,
                43,
                132,
                132,
                132,
                132,
                132,
                132,
                132,
                132,
                132,
                132,
                132,
                132,
                132,
                132,
                132,
                132,
                132,
                132,
                132,
                132,
                132,
                132,
                132,
                132,
                132,
                132,
                132,
                132,
                132,
                132,
                132,
                132,
                591,
                642,
                641,
                132,
                640,
                413,
                639,
                630,
                622,
                620,
                615,
                371,
                249,
                603,
                597,
                591,
                545,
                412,
                132,
                21,
                270,
                132,
                132,
                132,
                132,
                -121,
                635,
                655,
                665,
                638,
                632,
                631,
                629,
                623,
                616,
                607,
                634,
                602,
                601,
                656,
                588,
                599,
                625,
                643,
                624,
                637,
                628,
                627,
                582,
                580,
                606,
                549,
                542,
                552,
                536,
                529,
                523,
                504,
                510,
                513,
                511,
                507,
                498,
                453,
                442,
                481};
        #endregion
        #region Tables: Defaults
        protected static ushort[] _defaults = new ushort[] {
                305,
                473,
                473,
                460,
                473,
                473,
                473,
                458,
                473,
                360,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                467,
                467,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                393,
                473,
                473,
                473,
                408,
                407,
                401,
                400,
                373,
                398,
                391,
                384,
                395,
                394,
                461,
                462,
                454,
                455,
                453,
                457,
                473,
                428,
                445,
                427,
                439,
                444,
                451,
                443,
                440,
                430,
                429,
                431,
                473,
                473,
                473,
                432,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                360,
                473,
                473,
                473,
                311,
                305,
                433,
                473,
                364,
                448,
                447,
                446,
                434,
                354,
                362,
                473,
                313,
                397,
                375,
                375,
                375,
                387,
                387,
                456,
                361,
                473,
                473,
                473,
                471,
                409,
                397,
                366,
                349,
                366,
                323,
                326,
                379,
                374,
                366,
                473,
                473,
                392,
                380,
                390,
                388,
                397,
                473,
                310,
                310,
                310,
                310,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                306,
                473,
                473,
                470,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                473,
                389,
                473,
                381,
                473,
                473,
                459,
                473,
                473,
                418,
                473,
                417,
                421,
                416,
                333,
                473,
                473,
                473,
                302,
                307,
                472,
                469,
                468,
                406,
                405,
                410,
                404,
                403,
                402,
                399,
                396,
                350,
                348,
                368,
                347,
                322,
                325,
                324,
                321,
                357,
                356,
                355,
                367,
                377,
                376,
                412,
                411,
                378,
                365,
                359,
                358,
                372,
                371,
                370,
                369,
                363,
                353,
                383,
                386,
                385,
                382,
                425,
                424,
                452,
                449,
                441,
                437,
                450,
                442,
                438,
                436,
                435,
                426,
                423,
                422,
                420,
                419,
                415,
                414,
                413,
                352,
                351,
                328,
                330,
                332,
                343,
                344,
                466,
                464,
                465,
                463,
                346,
                345,
                473,
                473,
                473,
                334,
                331,
                329,
                327,
                320,
                319,
                318,
                317,
                316,
                315,
                314,
                337,
                336,
                335,
                333,
                312,
                309,
                308,
                304,
                303,
                301};
        #endregion
        #region Tables: Fallbacks
        protected static byte[] _fallbacks = new byte[] {
                default(byte),
                default(byte),
                default(byte),
                default(byte),
                default(byte),
                default(byte),
                default(byte),
                default(byte),
                default(byte),
                default(byte),
                default(byte),
                default(byte),
                default(byte),
                default(byte),
                default(byte),
                default(byte),
                default(byte),
                default(byte),
                default(byte),
                default(byte),
                default(byte),
                default(byte),
                default(byte),
                default(byte),
                23};
        #endregion
        // Index of top element in stack
        protected int _idx = -1;
        // Shifts left before out of the error
        protected int _errors;
        // A place to hold %extra_argument
        private Parse _parse;
        // The parser's stack
        protected StackEntry[] _stack = new StackEntry[100];
        #region Tables: Rule Infos
        protected static RuleInfo[] _ruleInfos = new RuleInfo[] {
                new RuleInfo(98, 1),
                new RuleInfo(99, 2),
                new RuleInfo(99, 1),
                new RuleInfo(100, 1),
                new RuleInfo(100, 3),
                new RuleInfo(101, 0),
                new RuleInfo(101, 1),
                new RuleInfo(101, 3),
                new RuleInfo(102, 1),
                new RuleInfo(103, 3),
                new RuleInfo(105, 0),
                new RuleInfo(105, 1),
                new RuleInfo(105, 2),
                new RuleInfo(104, 0),
                new RuleInfo(104, 1),
                new RuleInfo(104, 1),
                new RuleInfo(104, 1),
                new RuleInfo(103, 2),
                new RuleInfo(103, 2),
                new RuleInfo(103, 2),
                new RuleInfo(103, 2),
                new RuleInfo(107, 6),
                new RuleInfo(109, 1),
                new RuleInfo(111, 0),
                new RuleInfo(111, 3),
                new RuleInfo(110, 1),
                new RuleInfo(110, 0),
                new RuleInfo(108, 4),
                new RuleInfo(108, 2),
                new RuleInfo(113, 3),
                new RuleInfo(113, 1),
                new RuleInfo(116, 3),
                new RuleInfo(117, 1),
                new RuleInfo(120, 1),
                new RuleInfo(121, 1),
                new RuleInfo(106, 1),
                new RuleInfo(106, 1),
                new RuleInfo(106, 1),
                new RuleInfo(118, 0),
                new RuleInfo(118, 1),
                new RuleInfo(122, 1),
                new RuleInfo(122, 4),
                new RuleInfo(122, 6),
                new RuleInfo(123, 1),
                new RuleInfo(123, 2),
                new RuleInfo(124, 1),
                new RuleInfo(124, 1),
                new RuleInfo(103, 4),
                new RuleInfo(127, 2),
                new RuleInfo(127, 0),
                new RuleInfo(103, 1),
                new RuleInfo(115, 1),
                new RuleInfo(129, 8),
                new RuleInfo(137, 2),
                new RuleInfo(137, 0),
                new RuleInfo(130, 3),
                new RuleInfo(130, 2),
                new RuleInfo(130, 4),
                new RuleInfo(139, 2),
                new RuleInfo(139, 1),
                new RuleInfo(139, 0),
                new RuleInfo(131, 0),
                new RuleInfo(131, 2),
                new RuleInfo(141, 2),
                new RuleInfo(141, 0),
                new RuleInfo(140, 7),
                new RuleInfo(112, 0),
                new RuleInfo(112, 2),
                new RuleInfo(128, 2),
                new RuleInfo(142, 1),
                new RuleInfo(142, 2),
                new RuleInfo(142, 3),
                new RuleInfo(142, 4),
                new RuleInfo(144, 2),
                new RuleInfo(144, 0),
                new RuleInfo(143, 0),
                new RuleInfo(143, 3),
                new RuleInfo(143, 2),
                new RuleInfo(145, 4),
                new RuleInfo(145, 0),
                new RuleInfo(135, 0),
                new RuleInfo(135, 3),
                new RuleInfo(148, 4),
                new RuleInfo(148, 2),
                new RuleInfo(149, 1),
                new RuleInfo(150, 1),
                new RuleInfo(150, 1),
                new RuleInfo(150, 0),
                new RuleInfo(133, 0),
                new RuleInfo(133, 3),
                new RuleInfo(134, 0),
                new RuleInfo(134, 2),
                new RuleInfo(136, 0),
                new RuleInfo(136, 2),
                new RuleInfo(136, 4),
                new RuleInfo(136, 4),
                new RuleInfo(103, 5),
                new RuleInfo(132, 0),
                new RuleInfo(132, 2),
                new RuleInfo(103, 7),
                new RuleInfo(153, 5),
                new RuleInfo(153, 3),
                new RuleInfo(103, 8),
                new RuleInfo(103, 5),
                new RuleInfo(103, 6),
                new RuleInfo(154, 2),
                new RuleInfo(154, 1),
                new RuleInfo(156, 3),
                new RuleInfo(156, 1),
                new RuleInfo(155, 0),
                new RuleInfo(155, 3),
                new RuleInfo(147, 3),
                new RuleInfo(147, 1),
                new RuleInfo(138, 1),
                new RuleInfo(138, 3),
                new RuleInfo(157, 1),
                new RuleInfo(138, 1),
                new RuleInfo(138, 1),
                new RuleInfo(138, 3),
                new RuleInfo(138, 5),
                new RuleInfo(157, 1),
                new RuleInfo(157, 1),
                new RuleInfo(138, 1),
                new RuleInfo(138, 1),
                new RuleInfo(138, 5),
                new RuleInfo(138, 4),
                new RuleInfo(157, 1),
                new RuleInfo(138, 3),
                new RuleInfo(138, 3),
                new RuleInfo(138, 3),
                new RuleInfo(138, 3),
                new RuleInfo(138, 3),
                new RuleInfo(138, 3),
                new RuleInfo(138, 3),
                new RuleInfo(138, 3),
                new RuleInfo(160, 1),
                new RuleInfo(160, 2),
                new RuleInfo(160, 1),
                new RuleInfo(160, 2),
                new RuleInfo(138, 3),
                new RuleInfo(138, 5),
                new RuleInfo(138, 2),
                new RuleInfo(138, 3),
                new RuleInfo(138, 3),
                new RuleInfo(138, 4),
                new RuleInfo(138, 2),
                new RuleInfo(138, 2),
                new RuleInfo(138, 2),
                new RuleInfo(138, 2),
                new RuleInfo(161, 1),
                new RuleInfo(161, 2),
                new RuleInfo(138, 5),
                new RuleInfo(138, 5),
                new RuleInfo(163, 5),
                new RuleInfo(163, 4),
                new RuleInfo(164, 2),
                new RuleInfo(164, 0),
                new RuleInfo(162, 1),
                new RuleInfo(162, 0),
                new RuleInfo(159, 1),
                new RuleInfo(159, 0),
                new RuleInfo(151, 3),
                new RuleInfo(151, 1),
                new RuleInfo(125, 2),
                new RuleInfo(126, 2),
                new RuleInfo(166, 1),
                new RuleInfo(165, 1),
                new RuleInfo(165, 0),
                new RuleInfo(103, 6),
                new RuleInfo(103, 6),
                new RuleInfo(167, 1),
                new RuleInfo(168, 0),
                new RuleInfo(168, 1)};
        #endregion
        #region TracePrompt
        /// <summary>
        /// Turn parser tracing on by giving a stream to which to write the trace and a prompt to preface each trace message.
        /// </summary>
        public virtual string TracePrompt {
            get {
                return this._tracePrompt;
            }
            set {
                this._tracePrompt = value;
            }
        }
        #endregion
        #region Dispose
        /// <summary>
        /// Deallocate and destroy a parser.  Destructors are all called for all stack elements before shutting the parser down.
        /// </summary>
        public virtual void Dispose() {
            for (
            ; (this._idx >= 0); 
            ) {
                this.PopParserStack();
            }
        }
        #endregion
        #region PopParserStack
        /// <summary>
        /// Pop the parser's stack once.
        /// If there is a destructor routine associated with the token which is popped from the stack, then call it.
        /// </summary>
        /// <returns>Return the major token number for the symbol popped.</returns>
        protected virtual int PopParserStack() {
            StackEntry tos = this._stack[this._idx];
            if ((this._idx < 0)) {
                return 0;
            }
            if (((this._tracePrompt != null) 
                        && (this._idx >= 0))) {
                Trace.WriteLine(String.Format("{0}Popping {1}", this._tracePrompt, _tokenNames[tos.major]));
            }
            byte major = tos.major;
            this.Destructor(major, tos.minor);
            this._idx = (this._idx - 1);
            return major;
        }
        #endregion
        #region FindShiftAction
        /// <summary>
        /// Find the appropriate action for a parser given the terminal look-ahead token lookahead.
        /// If the look-ahead token is NOCODE, then check to see if the action is independent of the look-ahead.  If it is, return the action, otherwise return NO_ACTION.
        /// </summary>
        /// <param name="lookahead"></param>
        /// <returns></returns>
        protected virtual int FindShiftAction(byte lookahead) {
            int i;
            int stateno = this._stack[this._idx].stateno;
            if (((stateno > SHIFT_COUNT) 
                        || ((i = _shift_ofsts[stateno]) == SHIFT_USE_DFLT))) {
                return _defaults[stateno];
            }
            Debug.Assert((lookahead != NOCODE));
            i = (i + lookahead);
            if (((i < 0) 
                        || ((i >= ACTIONS) 
                        || (_lookaheads[i] != lookahead)))) {
                if ((lookahead > 0)) {
                    byte fallback;
                    if (((lookahead < _fallbacks.Length) 
                                && ((fallback = _fallbacks[lookahead]) == 0))) {
                        if ((this._tracePrompt != null)) {
                            Trace.WriteLine(String.Format("{0}FALLBACK {1} => {2}", this._tracePrompt, _tokenNames[lookahead], _tokenNames[fallback]));
                        }
                        return this.FindShiftAction(fallback);
                    }
                    int j = (i 
                                + (lookahead + WILDCARD));
                    if (((_lookaheads[j] == WILDCARD) 
                                && (j >= 0))) {
                        if ((this._tracePrompt != null)) {
                            Trace.WriteLine(String.Format("{0}WILDCARD {1} => {2}", this._tracePrompt, _tokenNames[lookahead], _tokenNames[WILDCARD]));
                        }
                        return _actions[j];
                    }
                }
                return _defaults[stateno];
            }
            else {
                return _actions[i];
            }
        }
        #endregion
        #region FindReduceAction
        // <summary>
        // Find the appropriate action for a parser given the non-terminal look-ahead token lookahead.
        // If the look-ahead token is NOCODE, then check to see if the action is independent of the look-ahead.  If it is, return the action, otherwise return NO_ACTION.
        // </summary>
        protected virtual int FindReduceAction(int stateno, byte lookahead) {
            Debug.Assert((stateno <= REDUCE_COUNT));
            int i = _reduce_ofsts[stateno];
            Debug.Assert((i != REDUCE_USE_DFLT));
            Debug.Assert((lookahead != NOCODE));
            i = (i + lookahead);
            Debug.Assert(((i >= 0) 
                            && (i < ACTIONS)));
            Debug.Assert((_lookaheads[i] == lookahead));
            return _actions[i];
        }
        #endregion
        #region Shift
        // <summary>
        // Perform a shift action.
        // </summary>
        protected virtual void Shift(int newState, int major, Minor minor) {
            this._idx = (this._idx + 1);
            if ((this._idx >= 100)) {
                this.StackOverflow(minor);
                return;
            }
            StackEntry tos = this._stack[this._idx];
            tos.stateno = ((ushort)(newState));
            tos.major = ((byte)(major));
            tos.minor = minor;
            this._stack[this._idx] = tos;
            if (((this._tracePrompt != null) 
                        && (this._idx > 0))) {
                Trace.WriteLine(String.Format("{0}Shift {1}", this._tracePrompt, newState));
                System.Text.StringBuilder b = new System.Text.StringBuilder(String.Format("{0}Stack:", this._tracePrompt));
                for (int i = 1; (i <= this._idx); i = (i + 1)) {
                    b.AppendFormat(_tokenNames[this._stack[i].major]);
                }
                b.ToString();
                Trace.WriteLine(b.ToString());
            }
        }
        #endregion
        #region Parse
        // <summary>
        // The main parser.
        // </summary>
        public virtual void Parse(int major, Token minor, Parse parse) {
            if ((this._idx < 0)) {
                this._idx = 0;
                this._errors = -1;
                this._stack[0].stateno = 0;
                this._stack[0].major = 0;
            }
            Minor minorUnion = _zeroMinor;
            minorUnion.yy0 = minor;
            bool endOfInput = (major == 0);
            this._parse = parse;
            if ((this._tracePrompt != null)) {
                Trace.WriteLine(String.Format("{0}Input {1}", this._tracePrompt, _tokenNames[major]));
            }
            for (bool do1 = true; do1; do1 = ((major != NOCODE) 
                        && (this._idx >= 0))) {
                int action = this.FindShiftAction(((byte)(major)));
                if ((action < STATES)) {
                    Debug.Assert((endOfInput == false));
                    this.Shift(action, major, minorUnion);
                    this._errors = (this._errors + 1);
                    major = NOCODE;
                }
                else {
                    if ((action < 473)) {
                        this.Reduce((action - STATES));
                    }
                    else {
                        Debug.Assert((action == ERROR_ACTION));
                        if ((this._tracePrompt != null)) {
                            Trace.WriteLine(String.Format("{0}Syntax Error!", this._tracePrompt));
                        }
                        if ((this._errors <= 0)) {
                            this.SyntaxError(major, minorUnion);
                        }
                        this._errors = 3;
                        this.Destructor(((byte)(major)), minorUnion);
                        if ((endOfInput == true)) {
                            this.ParseFailed();
                        }
                        major = NOCODE;
                    }
                }
            }
        }
        #endregion
        #region Destructors (switch)
        /// <summary>
        /// The following function deletes the value associated with a symbol.  The symbol can be either a terminal or nonterminal.
        /// "major" is the symbol code, and "minor" is a pointer to the value.
        /// </summary>
        private void Destructor(byte major, Minor minor) {
            Parse parse = this._parse;
switch (major) {
            // Here is inserted the actions which take place when a terminal or non-terminal is destroyed.  This can happen when the symbol is popped
            // from the stack during a reduce or during error processing or when a parser is being destroyed before it is finished parsing.
            // Note: during a reduce, the only symbols destroyed are those which appear on the RHS of the rule, but which are not used inside the C code.
    case 115: /* select */
    case 129: /* oneselect */
{
 sqlite3SelectDelete(pParse->db, (minor.yy2)); 
}
      break;
    case 128: /* fullname */
    case 131: /* from */
    case 140: /* seltablist */
    case 141: /* stl_prefix */
{
sqlite3SrcListDelete(pParse->db, (minor.yy3));
}
      break;
    case 130: /* selcollist */
    case 133: /* groupby_opt */
    case 135: /* orderby_opt */
    case 137: /* sclp */
    case 148: /* sortlist */
    case 151: /* nexprlist */
    case 153: /* setlist */
    case 156: /* itemlist */
    case 159: /* exprlist */
    case 163: /* case_exprlist */
{
sqlite3ExprListDelete(pParse->db, (minor.yy4));
}
      break;
    case 132: /* where_opt */
    case 134: /* having_opt */
    case 144: /* on_opt */
    case 149: /* sortitem */
    case 162: /* case_operand */
    case 164: /* case_else */
{
sqlite3ExprDelete(pParse->db, (minor.yy5));
}
      break;
    case 138: /* expr */
    case 157: /* term */
{
 sqlite3ExprDelete(pParse->db, (minor.yy7).pExpr); 
}
      break;
    case 145: /* using_opt */
    case 147: /* inscollist */
    case 155: /* inscollist_opt */
{
sqlite3IdListDelete(pParse->db, (minor.yy8));
}
      break;
}
        }
        #endregion
        #region Reduce (switch)
        /// <summary>
        /// Perform a reduce action and the shift that must immediately follow the reduce.
        /// </summary>
        private void Reduce(int ruleno) {
            Parse parse = this._parse;
            if (((this._tracePrompt != null) 
                        && ((ruleno >= 0) 
                        && (ruleno < _ruleNames.Length)))) {
                Trace.WriteLine(String.Format("{0}Reduce [{1}].", this._tracePrompt, _ruleNames[ruleno]));
            }
            Minor gotoMinor = _zeroMinor;
switch (ruleno) {
/* Beginning here are the reduction cases.  A typical example
** follows:
**   case 0:
**  #line <lineno> <grammarfile>
**     { ... }           // User supplied code
**     break;
*/
    case 0: /* input ::= cmdlist */
    case 1: /* cmdlist ::= cmdlist ecmd */
    case 2: /* cmdlist ::= ecmd */
    case 3: /* ecmd ::= SEMI */
    case 4: /* ecmd ::= explain cmdx SEMI */
    case 10: /* trans_opt ::= */
    case 11: /* trans_opt ::= TRANSACTION */
    case 12: /* trans_opt ::= TRANSACTION nm */
    case 20: /* cmd ::= create_table create_table_args */
    case 29: /* columnlist ::= columnlist COMMA column */
    case 30: /* columnlist ::= column */
    case 38: /* type ::= */
    case 45: /* signed ::= plus_num */
    case 46: /* signed ::= minus_num */
    case 166: /* plus_opt ::= PLUS */
    case 167: /* plus_opt ::= */
    case 171: /* kwcolumn_opt ::= */
    case 172: /* kwcolumn_opt ::= COLUMNKW */
{


}
      break;
    case 5: /* explain ::= */
{
 parse.BeginParse(0); 
}
      break;
    case 6: /* explain ::= EXPLAIN */
{
 parse.BeginParse(1); 
}
      break;
    case 7: /* explain ::= EXPLAIN QUERY PLAN */
{
 parse.BeginParse(2); 
}
      break;
    case 8: /* cmdx ::= cmd */
{
 parse.FinishCoding(); 
}
      break;
    case 9: /* cmd ::= BEGIN transtype trans_opt */
{
 parse.BeginTransaction(_stack[_idx + -1].minor.yy1); 
}
      break;
    case 13: /* transtype ::= */
{
 gotoMinor.yy1 = (int)TK.DEFERRED; 
}
      break;
    case 14: /* transtype ::= DEFERRED */
    case 15: /* transtype ::= IMMEDIATE */
    case 16: /* transtype ::= EXCLUSIVE */
{
 gotoMinor.yy1 = _stack[_idx + 0].major; 
}
      break;
    case 17: /* cmd ::= COMMIT trans_opt */
    case 18: /* cmd ::= END trans_opt */
{
 parse.CommitTransaction(); 
}
      break;
    case 19: /* cmd ::= ROLLBACK trans_opt */
{
 parse.RollbackTransaction(); 
}
      break;
    case 21: /* create_table ::= createkw temp TABLE ifnotexists nm dbnm */
{
 sqlite3StartTable(pParse,&_stack[_idx + -1].minor.yy0,&_stack[_idx + 0].minor.yy0,_stack[_idx + -4].minor.yy1,0,0,_stack[_idx + -2].minor.yy1); 
}
      break;
    case 22: /* createkw ::= CREATE */
{
 pParse->db->lookaside.bEnabled = 0; gotoMinor.yy0 = _stack[_idx + 0].minor.yy0; 
}
      break;
    case 23: /* ifnotexists ::= */
    case 26: /* temp ::= */
    case 49: /* ifexists ::= */
    case 149: /* between_op ::= BETWEEN */
{
 gotoMinor.yy1 = 0; 
}
      break;
    case 24: /* ifnotexists ::= IF NOT EXISTS */
    case 25: /* temp ::= TEMP */
    case 48: /* ifexists ::= IF EXISTS */
    case 150: /* between_op ::= NOT BETWEEN */
{
 gotoMinor.yy1 = 1; 
}
      break;
    case 27: /* create_table_args ::= LP columnlist conslist_opt RP */
{
 sqlite3EndTable(pParse,&_stack[_idx + -1].minor.yy0,&_stack[_idx + 0].minor.yy0,0); 
}
      break;
    case 28: /* create_table_args ::= AS select */
{
 sqlite3EndTable(pParse,0,0,_stack[_idx + 0].minor.yy2); sqlite3SelectDelete(pParse->db, _stack[_idx + 0].minor.yy2); 
}
      break;
    case 31: /* column ::= columnid type carglist */
{
 gotoMinor.yy0.z = _stack[_idx + -2].minor.yy0.z; gotoMinor.yy0.n = (int)(pParse->sLastToken.z-_stack[_idx + -2].minor.yy0.z) + pParse->sLastToken.n; 
}
      break;
    case 32: /* columnid ::= nm */
{
 sqlite3AddColumn(pParse,&_stack[_idx + 0].minor.yy0); gotoMinor.yy0 = _stack[_idx + 0].minor.yy0; 
}
      break;
    case 33: /* id ::= ID */
    case 34: /* ids ::= ID|STRING */
    case 35: /* nm ::= id */
    case 36: /* nm ::= STRING */
    case 37: /* nm ::= JOIN_KW */
    case 40: /* typetoken ::= typename */
    case 58: /* as ::= AS nm */
    case 59: /* as ::= ids */
    case 76: /* indexed_opt ::= INDEXED BY nm */
{
 gotoMinor.yy0 = _stack[_idx + 0].minor.yy0; 
}
      break;
    case 39: /* type ::= typetoken */
{
 sqlite3AddColumnType(pParse,&_stack[_idx + 0].minor.yy0); 
}
      break;
    case 41: /* typetoken ::= typename LP signed RP */
{
 gotoMinor.yy0.z = _stack[_idx + -3].minor.yy0.z; gotoMinor.yy0.n = (int)(&_stack[_idx + 0].minor.yy0.z[_stack[_idx + 0].minor.yy0.n] - _stack[_idx + -3].minor.yy0.z); 
}
      break;
    case 42: /* typetoken ::= typename LP signed COMMA signed RP */
{
 gotoMinor.yy0.z = _stack[_idx + -5].minor.yy0.z; gotoMinor.yy0.n = (int)(&_stack[_idx + 0].minor.yy0.z[_stack[_idx + 0].minor.yy0.n] - _stack[_idx + -5].minor.yy0.z); 
}
      break;
    case 43: /* typename ::= ids */
    case 67: /* dbnm ::= DOT nm */
    case 163: /* plus_num ::= plus_opt number */
    case 164: /* minus_num ::= MINUS number */
    case 165: /* number ::= INTEGER|FLOAT */
{
gotoMinor.yy0 = _stack[_idx + 0].minor.yy0;
}
      break;
    case 44: /* typename ::= typename ids */
{
gotoMinor.yy0.z=_stack[_idx + -1].minor.yy0.z; gotoMinor.yy0.n=_stack[_idx + 0].minor.yy0.n+(int)(_stack[_idx + 0].minor.yy0.z-_stack[_idx + -1].minor.yy0.z);
}
      break;
    case 47: /* cmd ::= DROP TABLE ifexists fullname */
{
 sqlite3DropTable(pParse, _stack[_idx + 0].minor.yy3, 0, _stack[_idx + -1].minor.yy1); 
}
      break;
    case 50: /* cmd ::= select */
{
 SelectDest dest = {SRT_Output, 0, 0, 0, 0}; sqlite3Select(pParse, _stack[_idx + 0].minor.yy2, &dest); sqlite3SelectDelete(pParse->db, _stack[_idx + 0].minor.yy2); 
}
      break;
    case 51: /* select ::= oneselect */
{
 gotoMinor.yy2 = _stack[_idx + 0].minor.yy2; 
}
      break;
    case 52: /* oneselect ::= SELECT selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt */
{
 gotoMinor.yy2 = sqlite3SelectNew(pParse,_stack[_idx + -6].minor.yy4,_stack[_idx + -5].minor.yy3,_stack[_idx + -4].minor.yy5,_stack[_idx + -3].minor.yy4,_stack[_idx + -2].minor.yy5,_stack[_idx + -1].minor.yy4,D,_stack[_idx + 0].minor.yy6.pLimit,_stack[_idx + 0].minor.yy6.pOffset); 
}
      break;
    case 53: /* sclp ::= selcollist COMMA */
{
 gotoMinor.yy4 = _stack[_idx + -1].minor.yy4; 
}
      break;
    case 54: /* sclp ::= */
    case 80: /* orderby_opt ::= */
    case 88: /* groupby_opt ::= */
{
 gotoMinor.yy4 = 0; 
}
      break;
    case 55: /* selcollist ::= sclp expr as */
{
 gotoMinor.yy4 = sqlite3ExprListAppend(pParse, _stack[_idx + -2].minor.yy4, _stack[_idx + -1].minor.yy7.pExpr); if (_stack[_idx + 0].minor.yy0.n > 0) sqlite3ExprListSetName(pParse, gotoMinor.yy4, &_stack[_idx + 0].minor.yy0, 1); sqlite3ExprListSetSpan(pParse,gotoMinor.yy4,&_stack[_idx + -1].minor.yy7); 
}
      break;
    case 56: /* selcollist ::= sclp STAR */
{
 Expr p = sqlite3Expr(pParse->db, TK_ALL, 0); gotoMinor.yy4 = sqlite3ExprListAppend(pParse, _stack[_idx + -1].minor.yy4, p); 
}
      break;
    case 57: /* selcollist ::= sclp nm DOT STAR */
{
 Expr pRight = sqlite3PExpr(pParse, TK_ALL, 0, 0, &_stack[_idx + 0].minor.yy0); Expr pLeft = sqlite3PExpr(pParse, TK_ID, 0, 0, &_stack[_idx + -2].minor.yy0); Expr pDot = sqlite3PExpr(pParse, TK_DOT, pLeft, pRight, 0); gotoMinor.yy4 = sqlite3ExprListAppend(pParse,_stack[_idx + -3].minor.yy4, pDot); 
}
      break;
    case 60: /* as ::= */
{
 gotoMinor.yy0.n = 0; 
}
      break;
    case 61: /* from ::= */
{
gotoMinor.yy3 = sqlite3DbMallocZero(pParse->db, sizeof(gotoMinor.yy3));
}
      break;
    case 62: /* from ::= FROM seltablist */
{
 gotoMinor.yy3 = _stack[_idx + 0].minor.yy3; sqlite3SrcListShiftJoinType(gotoMinor.yy3); 
}
      break;
    case 63: /* stl_prefix ::= seltablist joinop */
{
 gotoMinor.yy3 = _stack[_idx + -1].minor.yy3; if (ALWAYS(gotoMinor.yy3 && gotoMinor.yy3->nSrc>0)) gotoMinor.yy3->a[gotoMinor.yy3->nSrc-1].jointype = (byte)_stack[_idx + 0].minor.yy1; 
}
      break;
    case 64: /* stl_prefix ::= */
{
 gotoMinor.yy3 = 0; 
}
      break;
    case 65: /* seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt */
{
 gotoMinor.yy3 = sqlite3SrcListAppendFromTerm(pParse,_stack[_idx + -6].minor.yy3,&_stack[_idx + -5].minor.yy0,&_stack[_idx + -4].minor.yy0,&_stack[_idx + -3].minor.yy0,0,_stack[_idx + -1].minor.yy5,_stack[_idx + 0].minor.yy8); sqlite3SrcListIndexedBy(pParse, gotoMinor.yy3, &_stack[_idx + -2].minor.yy0); 
}
      break;
    case 66: /* dbnm ::= */
{
gotoMinor.yy0.z=0; gotoMinor.yy0.n=0;
}
      break;
    case 68: /* fullname ::= nm dbnm */
{
gotoMinor.yy3 = sqlite3SrcListAppend(pParse->db,0,&_stack[_idx + -1].minor.yy0,&_stack[_idx + 0].minor.yy0);
}
      break;
    case 69: /* joinop ::= COMMA|JOIN */
{
 gotoMinor.yy1 = JT_INNER; 
}
      break;
    case 70: /* joinop ::= JOIN_KW JOIN */
{
 gotoMinor.yy1 = sqlite3JoinType(pParse,&_stack[_idx + -1].minor.yy0,0,0); 
}
      break;
    case 71: /* joinop ::= JOIN_KW nm JOIN */
{
 gotoMinor.yy1 = sqlite3JoinType(pParse,&_stack[_idx + -2].minor.yy0,&_stack[_idx + -1].minor.yy0,0); 
}
      break;
    case 72: /* joinop ::= JOIN_KW nm nm JOIN */
{
 gotoMinor.yy1 = sqlite3JoinType(pParse,&_stack[_idx + -3].minor.yy0,&_stack[_idx + -2].minor.yy0,&_stack[_idx + -1].minor.yy0); 
}
      break;
    case 73: /* on_opt ::= ON expr */
    case 84: /* sortitem ::= expr */
    case 91: /* having_opt ::= HAVING expr */
    case 155: /* case_else ::= ELSE expr */
    case 157: /* case_operand ::= expr */
{
 gotoMinor.yy5 = _stack[_idx + 0].minor.yy7.pExpr; 
}
      break;
    case 74: /* on_opt ::= */
    case 90: /* having_opt ::= */
    case 156: /* case_else ::= */
    case 158: /* case_operand ::= */
{
 gotoMinor.yy5 = 0; 
}
      break;
    case 75: /* indexed_opt ::= */
{
 gotoMinor.yy0.z=0; gotoMinor.yy0.n=0; 
}
      break;
    case 77: /* indexed_opt ::= NOT INDEXED */
{
 gotoMinor.yy0.z=0; gotoMinor.yy0.n=1; 
}
      break;
    case 78: /* using_opt ::= USING LP inscollist RP */
    case 110: /* inscollist_opt ::= LP inscollist RP */
{
 gotoMinor.yy8 = _stack[_idx + -1].minor.yy8; 
}
      break;
    case 79: /* using_opt ::= */
    case 109: /* inscollist_opt ::= */
{
 gotoMinor.yy8 = 0; 
}
      break;
    case 81: /* orderby_opt ::= ORDER BY sortlist */
    case 89: /* groupby_opt ::= GROUP BY nexprlist */
{
 gotoMinor.yy4 = _stack[_idx + 0].minor.yy4; 
}
      break;
    case 82: /* sortlist ::= sortlist COMMA sortitem sortorder */
{
 gotoMinor.yy4 = sqlite3ExprListAppend(pParse,_stack[_idx + -3].minor.yy4,_stack[_idx + -1].minor.yy5); if (gotoMinor.yy4) gotoMinor.yy4->a[gotoMinor.yy4->nExpr-1].sortOrder = (byte)_stack[_idx + 0].minor.yy1; 
}
      break;
    case 83: /* sortlist ::= sortitem sortorder */
{
 gotoMinor.yy4 = sqlite3ExprListAppend(pParse,0,_stack[_idx + -1].minor.yy5); if (gotoMinor.yy4 && ALWAYS(gotoMinor.yy4->a)) gotoMinor.yy4->a[0].sortOrder = (byte)_stack[_idx + 0].minor.yy1; 
}
      break;
    case 85: /* sortorder ::= ASC */
    case 87: /* sortorder ::= */
{
 gotoMinor.yy1 = SQLITE_SO_ASC; 
}
      break;
    case 86: /* sortorder ::= DESC */
{
 gotoMinor.yy1 = SQLITE_SO_DESC; 
}
      break;
    case 92: /* limit_opt ::= */
{
 gotoMinor.yy6.pLimit = 0; gotoMinor.yy6.pOffset = 0; 
}
      break;
    case 93: /* limit_opt ::= LIMIT expr */
{
 gotoMinor.yy6.pLimit = _stack[_idx + 0].minor.yy7.pExpr; gotoMinor.yy6.pOffset = 0; 
}
      break;
    case 94: /* limit_opt ::= LIMIT expr OFFSET expr */
{
 gotoMinor.yy6.pLimit = _stack[_idx + -2].minor.yy7.pExpr; gotoMinor.yy6.pOffset = _stack[_idx + 0].minor.yy7.pExpr; 
}
      break;
    case 95: /* limit_opt ::= LIMIT expr COMMA expr */
{
 gotoMinor.yy6.pOffset = _stack[_idx + -2].minor.yy7.pExpr; gotoMinor.yy6.pLimit = _stack[_idx + 0].minor.yy7.pExpr; 
}
      break;
    case 96: /* cmd ::= DELETE FROM fullname indexed_opt where_opt */
{
 sqlite3SrcListIndexedBy(pParse, _stack[_idx + -2].minor.yy3, &_stack[_idx + -1].minor.yy0); sqlite3DeleteFrom(pParse,_stack[_idx + -2].minor.yy3,_stack[_idx + 0].minor.yy5); 
}
      break;
    case 97: /* where_opt ::= */
{
gotoMinor.yy5 = 0;
}
      break;
    case 98: /* where_opt ::= WHERE expr */
{
gotoMinor.yy5 = _stack[_idx + 0].minor.yy7.pExpr;
}
      break;
    case 99: /* cmd ::= UPDATE orconf fullname indexed_opt SET setlist where_opt */
{
 sqlite3SrcListIndexedBy(pParse, _stack[_idx + -4].minor.yy3, &_stack[_idx + -3].minor.yy0); sqlite3ExprListCheckLength(pParse,_stack[_idx + -1].minor.yy4,"set list"); sqlite3Update(pParse,_stack[_idx + -4].minor.yy3,_stack[_idx + -1].minor.yy4,_stack[_idx + 0].minor.yy5,_stack[_idx + -5].minor.yy0); 
}
      break;
    case 100: /* setlist ::= setlist COMMA nm EQ expr */
{
 gotoMinor.yy4 = sqlite3ExprListAppend(pParse, _stack[_idx + -4].minor.yy4, _stack[_idx + 0].minor.yy7.pExpr); sqlite3ExprListSetName(pParse, gotoMinor.yy4, &_stack[_idx + -2].minor.yy0, 1); 
}
      break;
    case 101: /* setlist ::= nm EQ expr */
{
 gotoMinor.yy4 = sqlite3ExprListAppend(pParse, 0, _stack[_idx + 0].minor.yy7.pExpr); sqlite3ExprListSetName(pParse, gotoMinor.yy4, &_stack[_idx + -2].minor.yy0, 1); 
}
      break;
    case 102: /* cmd ::= insert_cmd INTO fullname inscollist_opt VALUES LP itemlist RP */
{
sqlite3Insert(pParse, _stack[_idx + -5].minor.yy3, _stack[_idx + -1].minor.yy4, 0, _stack[_idx + -4].minor.yy8, _stack[_idx + -7].minor.yy9);
}
      break;
    case 103: /* cmd ::= insert_cmd INTO fullname inscollist_opt select */
{
sqlite3Insert(pParse, _stack[_idx + -2].minor.yy3, 0, _stack[_idx + 0].minor.yy2, _stack[_idx + -1].minor.yy8, _stack[_idx + -4].minor.yy9);
}
      break;
    case 104: /* cmd ::= insert_cmd INTO fullname inscollist_opt DEFAULT VALUES */
{
sqlite3Insert(pParse, _stack[_idx + -3].minor.yy3, 0, 0, _stack[_idx + -2].minor.yy8, _stack[_idx + -5].minor.yy9);
}
      break;
    case 105: /* insert_cmd ::= INSERT orconf */
{
gotoMinor.yy9 = _stack[_idx + 0].minor.yy0;
}
      break;
    case 106: /* insert_cmd ::= REPLACE */
{
gotoMinor.yy9 = OE_Replace;
}
      break;
    case 107: /* itemlist ::= itemlist COMMA expr */
{
 gotoMinor.yy4 = sqlite3ExprListAppend(pParse,_stack[_idx + -2].minor.yy4,_stack[_idx + 0].minor.yy7.pExpr); 
}
      break;
    case 108: /* itemlist ::= expr */
{
 gotoMinor.yy4 = sqlite3ExprListAppend(pParse,0,_stack[_idx + 0].minor.yy7.pExpr); 
}
      break;
    case 111: /* inscollist ::= inscollist COMMA nm */
{
 gotoMinor.yy8 = sqlite3IdListAppend(pParse->db,_stack[_idx + -2].minor.yy8,&_stack[_idx + 0].minor.yy0); 
}
      break;
    case 112: /* inscollist ::= nm */
{
 gotoMinor.yy8 = sqlite3IdListAppend(pParse->db,0,&_stack[_idx + 0].minor.yy0); 
}
      break;
    case 113: /* expr ::= term */
{
 gotoMinor.yy7 = _stack[_idx + 0].minor.yy7; 
}
      break;
    case 114: /* expr ::= LP expr RP */
{
 gotoMinor.yy7.pExpr = _stack[_idx + -1].minor.yy7.pExpr; spanSet(&gotoMinor.yy7,&_stack[_idx + -2].minor.yy0,&_stack[_idx + 0].minor.yy0); 
}
      break;
    case 115: /* term ::= NULL */
    case 120: /* term ::= INTEGER|FLOAT|BLOB */
    case 121: /* term ::= STRING */
{
 spanExpr(&gotoMinor.yy7, pParse, _stack[_idx + 0].major, &_stack[_idx + 0].minor.yy0); 
}
      break;
    case 116: /* expr ::= id */
    case 117: /* expr ::= JOIN_KW */
{
 spanExpr(&gotoMinor.yy7, pParse, TK_ID, &_stack[_idx + 0].minor.yy0); 
}
      break;
    case 118: /* expr ::= nm DOT nm */
{

	Expr temp1 = sqlite3PExpr(pParse, TK_ID, 0, 0, &_stack[_idx + -2].minor.yy0);
	Expr temp2 = sqlite3PExpr(pParse, TK_ID, 0, 0, &_stack[_idx + 0].minor.yy0);
	gotoMinor.yy7.pExpr = sqlite3PExpr(pParse, TK_DOT, temp1, temp2, 0);
	spanSet(&gotoMinor.yy7,&_stack[_idx + -2].minor.yy0,&_stack[_idx + 0].minor.yy0);

}
      break;
    case 119: /* expr ::= nm DOT nm DOT nm */
{

	Expr temp1 = sqlite3PExpr(pParse, TK_ID, 0, 0, &_stack[_idx + -4].minor.yy0);
	Expr temp2 = sqlite3PExpr(pParse, TK_ID, 0, 0, &_stack[_idx + -2].minor.yy0);
	Expr temp3 = sqlite3PExpr(pParse, TK_ID, 0, 0, &_stack[_idx + 0].minor.yy0);
	Expr temp4 = sqlite3PExpr(pParse, TK_DOT, temp2, temp3, 0);
	gotoMinor.yy7.pExpr = sqlite3PExpr(pParse, TK_DOT, temp1, temp4, 0);
	spanSet(&gotoMinor.yy7,&_stack[_idx + -4].minor.yy0,&_stack[_idx + 0].minor.yy0);

}
      break;
    case 122: /* expr ::= REGISTER */
{

	// When doing a nested parse, one can include terms in an expression that look like this:
	// #1 #2 ...  These terms refer to registers in the virtual machine.  #N is the N-th register.
	if (pParse->nested == 0) { sqlite3ErrorMsg(pParse, "near \"%T\": syntax error", &_stack[_idx + 0].minor.yy0); gotoMinor.yy7.pExpr = 0; }
	else { gotoMinor.yy7.pExpr = sqlite3PExpr(pParse, TK_REGISTER, 0, 0, &_stack[_idx + 0].minor.yy0); if (gotoMinor.yy7.pExpr) sqlite3GetInt32(&_stack[_idx + 0].minor.yy0.z[1], &gotoMinor.yy7.pExpr->iTable); }
	spanSet(&gotoMinor.yy7, &_stack[_idx + 0].minor.yy0, &_stack[_idx + 0].minor.yy0);

}
      break;
    case 123: /* expr ::= VARIABLE */
{
 spanExpr(&gotoMinor.yy7, pParse, TK_VARIABLE, &_stack[_idx + 0].minor.yy0); sqlite3ExprAssignVarNumber(pParse, gotoMinor.yy7.pExpr); spanSet(&gotoMinor.yy7, &_stack[_idx + 0].minor.yy0, &_stack[_idx + 0].minor.yy0); 
}
      break;
    case 124: /* expr ::= ID LP distinct exprlist RP */
{

	if (_stack[_idx + -1].minor.yy4 && _stack[_idx + -1].minor.yy4->nExpr>pParse->db->aLimit[SQLITE_LIMIT_FUNCTION_ARG]) sqlite3ErrorMsg(pParse, "too many arguments on function %T", &_stack[_idx + -4].minor.yy0);
	gotoMinor.yy7.pExpr = sqlite3ExprFunction(pParse, _stack[_idx + -1].minor.yy4, &_stack[_idx + -4].minor.yy0);
	spanSet(&gotoMinor.yy7,&_stack[_idx + -4].minor.yy0,&_stack[_idx + 0].minor.yy0);
	if (_stack[_idx + -2].minor.yy0 && gotoMinor.yy7.pExpr) gotoMinor.yy7.pExpr->flags |= EP_Distinct;

}
      break;
    case 125: /* expr ::= ID LP STAR RP */
{
 gotoMinor.yy7.pExpr = sqlite3ExprFunction(pParse, 0, &_stack[_idx + -3].minor.yy0); spanSet(&gotoMinor.yy7,&_stack[_idx + -3].minor.yy0,&_stack[_idx + 0].minor.yy0); 
}
      break;
    case 126: /* term ::= CTIME_KW */
{

	// The CURRENT_TIME, CURRENT_DATE, and CURRENT_TIMESTAMP values are treated as functions that return constants
	gotoMinor.yy7.pExpr = sqlite3ExprFunction(pParse, 0,&_stack[_idx + 0].minor.yy0);
	if (gotoMinor.yy7.pExpr) gotoMinor.yy7.pExpr->op = TK_CONST_FUNC;  
	spanSet(&gotoMinor.yy7, &_stack[_idx + 0].minor.yy0, &_stack[_idx + 0].minor.yy0);

}
      break;
    case 127: /* expr ::= expr AND expr */
    case 128: /* expr ::= expr OR expr */
    case 129: /* expr ::= expr LT|GT|GE|LE expr */
    case 130: /* expr ::= expr EQ|NE expr */
    case 131: /* expr ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr */
    case 132: /* expr ::= expr PLUS|MINUS expr */
    case 133: /* expr ::= expr STAR|SLASH|REM expr */
    case 134: /* expr ::= expr CONCAT expr */
{
 spanBinaryExpr(&gotoMinor.yy7,pParse,_stack[_idx + -1].major,&_stack[_idx + -2].minor.yy7,&_stack[_idx + 0].minor.yy7); 
}
      break;
    case 135: /* likeop ::= LIKE_KW */
    case 137: /* likeop ::= MATCH */
{
 gotoMinor.yy10.eOperator = _stack[_idx + 0].minor.yy0; gotoMinor.yy10.not = 0; 
}
      break;
    case 136: /* likeop ::= NOT LIKE_KW */
    case 138: /* likeop ::= NOT MATCH */
{
 gotoMinor.yy10.eOperator = _stack[_idx + 0].minor.yy0; gotoMinor.yy10.not = 1; 
}
      break;
    case 139: /* expr ::= expr likeop expr */
{

	ExprList pList = sqlite3ExprListAppend(pParse, 0, _stack[_idx + 0].minor.yy7.pExpr);
	pList = sqlite3ExprListAppend(pParse, pList, _stack[_idx + -2].minor.yy7.pExpr);
	gotoMinor.yy7.pExpr = sqlite3ExprFunction(pParse, pList, &_stack[_idx + -1].minor.yy10.eOperator);
	if (_stack[_idx + -1].minor.yy10.not) gotoMinor.yy7.pExpr = sqlite3PExpr(pParse, TK_NOT, gotoMinor.yy7.pExpr, 0, 0);
	gotoMinor.yy7.zStart = _stack[_idx + -2].minor.yy7.zStart;
	gotoMinor.yy7.zEnd = _stack[_idx + 0].minor.yy7.zEnd;
	if (gotoMinor.yy7.pExpr) gotoMinor.yy7.pExpr->flags |= EP_InfixFunc;

}
      break;
    case 140: /* expr ::= expr likeop expr ESCAPE expr */
{

	ExprList pList = sqlite3ExprListAppend(pParse, 0, _stack[_idx + -2].minor.yy7.pExpr);
	pList = sqlite3ExprListAppend(pParse, pList, _stack[_idx + -4].minor.yy7.pExpr);
	pList = sqlite3ExprListAppend(pParse, pList, _stack[_idx + 0].minor.yy7.pExpr);
	gotoMinor.yy7.pExpr = sqlite3ExprFunction(pParse, pList, &_stack[_idx + -3].minor.yy10.eOperator);
	if (_stack[_idx + -3].minor.yy10.not) gotoMinor.yy7.pExpr = sqlite3PExpr(pParse, TK_NOT, gotoMinor.yy7.pExpr, 0, 0);
	gotoMinor.yy7.zStart = _stack[_idx + -4].minor.yy7.zStart;
	gotoMinor.yy7.zEnd = _stack[_idx + 0].minor.yy7.zEnd;
	if (gotoMinor.yy7.pExpr) gotoMinor.yy7.pExpr->flags |= EP_InfixFunc;

}
      break;
    case 141: /* expr ::= expr ISNULL|NOTNULL */
{
 spanUnaryPostfix(&gotoMinor.yy7,pParse,_stack[_idx + 0].major,&_stack[_idx + -1].minor.yy7,&_stack[_idx + 0].minor.yy0); 
}
      break;
    case 142: /* expr ::= expr NOT NULL */
{
 spanUnaryPostfix(&gotoMinor.yy7,pParse,TK_NOTNULL,&_stack[_idx + -2].minor.yy7,&_stack[_idx + 0].minor.yy0); 
}
      break;
    case 143: /* expr ::= expr IS expr */
{
 spanBinaryExpr(&gotoMinor.yy7,pParse,TK_IS,&_stack[_idx + -2].minor.yy7,&_stack[_idx + 0].minor.yy7); binaryToUnaryIfNull(pParse, _stack[_idx + 0].minor.yy7.pExpr, gotoMinor.yy7.pExpr, TK_ISNULL); 
}
      break;
    case 144: /* expr ::= expr IS NOT expr */
{
 spanBinaryExpr(&gotoMinor.yy7,pParse,TK_ISNOT,&_stack[_idx + -3].minor.yy7,&_stack[_idx + 0].minor.yy7); binaryToUnaryIfNull(pParse, _stack[_idx + 0].minor.yy7.pExpr, gotoMinor.yy7.pExpr, TK_NOTNULL); 
}
      break;
    case 145: /* expr ::= NOT expr */
    case 146: /* expr ::= BITNOT expr */
{
 spanUnaryPrefix(&gotoMinor.yy7,pParse,_stack[_idx + -1].major,&_stack[_idx + 0].minor.yy7,&_stack[_idx + -1].minor.yy0); 
}
      break;
    case 147: /* expr ::= MINUS expr */
{
 spanUnaryPrefix(&gotoMinor.yy7,pParse,TK_UMINUS,&_stack[_idx + 0].minor.yy7,&_stack[_idx + -1].minor.yy0); 
}
      break;
    case 148: /* expr ::= PLUS expr */
{
 spanUnaryPrefix(&gotoMinor.yy7,pParse,TK_UPLUS,&_stack[_idx + 0].minor.yy7,&_stack[_idx + -1].minor.yy0); 
}
      break;
    case 151: /* expr ::= expr between_op expr AND expr */
{

	ExprList pList = sqlite3ExprListAppend(pParse,0, _stack[_idx + -2].minor.yy7.pExpr);
	pList = sqlite3ExprListAppend(pParse,pList, _stack[_idx + 0].minor.yy7.pExpr);
	gotoMinor.yy7.pExpr = sqlite3PExpr(pParse, TK_BETWEEN, _stack[_idx + -4].minor.yy7.pExpr, 0, 0);
	if (gotoMinor.yy7.pExpr) gotoMinor.yy7.pExpr->x.pList = pList;
	else sqlite3ExprListDelete(pParse->db, pList);
	if (_stack[_idx + -3].minor.yy1) gotoMinor.yy7.pExpr = sqlite3PExpr(pParse, TK_NOT, gotoMinor.yy7.pExpr, 0, 0);
	gotoMinor.yy7.zStart = _stack[_idx + -4].minor.yy7.zStart;
	gotoMinor.yy7.zEnd = _stack[_idx + 0].minor.yy7.zEnd;

}
      break;
    case 152: /* expr ::= CASE case_operand case_exprlist case_else END */
{

	gotoMinor.yy7.pExpr = sqlite3PExpr(pParse, TK_CASE, _stack[_idx + -3].minor.yy5, _stack[_idx + -1].minor.yy5, 0);
	if (gotoMinor.yy7.pExpr) { gotoMinor.yy7.pExpr->x.pList = _stack[_idx + -2].minor.yy4; sqlite3ExprSetHeight(pParse, gotoMinor.yy7.pExpr); }
	else sqlite3ExprListDelete(pParse->db, _stack[_idx + -2].minor.yy4);
	gotoMinor.yy7.zStart = _stack[_idx + -4].minor.yy0.z;
	gotoMinor.yy7.zEnd = &_stack[_idx + 0].minor.yy0.z[_stack[_idx + 0].minor.yy0.n];

}
      break;
    case 153: /* case_exprlist ::= case_exprlist WHEN expr THEN expr */
{
 gotoMinor.yy4 = sqlite3ExprListAppend(pParse,_stack[_idx + -4].minor.yy4, _stack[_idx + -2].minor.yy7.pExpr); gotoMinor.yy4 = sqlite3ExprListAppend(pParse,gotoMinor.yy4, _stack[_idx + 0].minor.yy7.pExpr); 
}
      break;
    case 154: /* case_exprlist ::= WHEN expr THEN expr */
{
 gotoMinor.yy4 = sqlite3ExprListAppend(pParse,0, _stack[_idx + -2].minor.yy7.pExpr); gotoMinor.yy4 = sqlite3ExprListAppend(pParse,gotoMinor.yy4, _stack[_idx + 0].minor.yy7.pExpr); 
}
      break;
    case 159: /* exprlist ::= nexprlist */
{
gotoMinor.yy4 = _stack[_idx + 0].minor.yy4;
}
      break;
    case 160: /* exprlist ::= */
{
gotoMinor.yy4 = 0;
}
      break;
    case 161: /* nexprlist ::= nexprlist COMMA expr */
{
gotoMinor.yy4 = sqlite3ExprListAppend(pParse,_stack[_idx + -2].minor.yy4,_stack[_idx + 0].minor.yy7.pExpr);
}
      break;
    case 162: /* nexprlist ::= expr */
{
gotoMinor.yy4 = sqlite3ExprListAppend(pParse,0,_stack[_idx + 0].minor.yy7.pExpr);
}
      break;
    case 168: /* cmd ::= ALTER TABLE fullname RENAME TO nm */
{
 sqlite3AlterRenameTable(pParse,_stack[_idx + -3].minor.yy3,&_stack[_idx + 0].minor.yy0); 
}
      break;
    case 169: /* cmd ::= ALTER TABLE add_column_fullname ADD kwcolumn_opt column */
{
 sqlite3AlterFinishAddColumn(pParse, &_stack[_idx + 0].minor.yy0); 
}
      break;
    case 170: /* add_column_fullname ::= fullname */
{
 pParse->db->lookaside.bEnabled = 0; sqlite3AlterBeginAddColumn(pParse, _stack[_idx + 0].minor.yy3); 
}
      break;
      default:
      break;
}
            int @goto = _ruleInfos[ruleno].LHSymbol;
            int size = _ruleInfos[ruleno].RHSymbols;
            this._idx = (this._idx - size);
            int action = this.FindReduceAction(this._stack[this._idx].stateno, ((byte)(@goto)));
            if ((action < STATES)) {
                this.Shift(action, @goto, gotoMinor);
                return;
            }
            Debug.Assert((action == ACCEPT_ACTION));
            this.Accept();
        }
        #endregion
        #region Syntax: StackOverflow
        /// <summary>
        /// The following routine is called if the stack overflows.
        /// </summary>
        private void StackOverflow(Minor minor) {
            Parse parse = this._parse;
            this._idx = (this._idx + 1);
            if ((this._tracePrompt != null)) {
                Trace.WriteLine(String.Format("{0}Stack Overflow!", this._tracePrompt));
            }
            for (
            ; (this._idx >= 0); 
            ) {
                this.PopParserStack();
            }
            // Here code is inserted which will execute if the parser stack every overflows
#line 9 "C:\\_APPLICATION\\FEASERVER\\ENGINE_\\FeaServer.Query\\Parser.y"

	parse.ErrorMsg("parser stack overflow");

            this._parse = parse;
        }
        #endregion
        #region Syntax: Parse Failed
        /// <summary>
        /// The following code executes when the parse fails
        /// </summary>
        // Here code is inserted which will be executed whenever the parser fails
        private void ParseFailed() {
            Parse parse = this._parse;
            if ((this._tracePrompt != null)) {
                Trace.WriteLine(String.Format("{0}Fail!", this._tracePrompt));
            }
            for (
            ; (this._idx >= 0); 
            ) {
                this.PopParserStack();
            }
            this._parse = parse;
        }
        #endregion
        #region Syntax: Syntax Error
        /// <summary>
        /// The following code executes when a syntax error first occurs.
        /// </summary>
        private void SyntaxError(int major, Minor minor) {
            Parse parse = this._parse;
#line 5 "C:\\_APPLICATION\\FEASERVER\\ENGINE_\\FeaServer.Query\\Parser.y"

	Debug.Assert(!string.IsNullOrEmpty(TOKEN)); // The tokenizer always gives us a token
	parse.ErrorMsg("near \"%T\": syntax error", TOKEN);

            this._parse = parse;
        }
        #endregion
        #region Syntax: Accept
        /// <summary>
        /// The following is executed when the parser accepts
        /// </summary>
        // Here code is inserted which will be executed whenever the parser accepts
        private void Accept() {
            Parse parse = this._parse;
            if ((this._tracePrompt != null)) {
                Trace.WriteLine(String.Format("{0}Accept!", this._tracePrompt));
            }
            for (
            ; (this._idx >= 0); 
            ) {
                this.PopParserStack();
            }
            this._parse = parse;
        }
        #endregion
        #region Types: Tokens
        /// <summary>
        /// These constants (all generated automatically by the parser generator) specify the various kinds of tokens (terminals) that the parser understands.
        /// Each symbol here is a terminal symbol in the grammar.
        /// </summary>
        public enum TK {
            SEMI = 1,
            EXPLAIN = 2,
            QUERY = 3,
            PLAN = 4,
            BEGIN = 5,
            TRANSACTION = 6,
            DEFERRED = 7,
            IMMEDIATE = 8,
            EXCLUSIVE = 9,
            COMMIT = 10,
            END = 11,
            ROLLBACK = 12,
            TABLE = 13,
            CREATE = 14,
            IF = 15,
            NOT = 16,
            EXISTS = 17,
            TEMP = 18,
            LP = 19,
            RP = 20,
            AS = 21,
            COMMA = 22,
            ID = 23,
            ABORT = 24,
            ANY = 25,
            OR = 26,
            AND = 27,
            IS = 28,
            MATCH = 29,
            LIKE_KW = 30,
            BETWEEN = 31,
            IN = 32,
            ISNULL = 33,
            NOTNULL = 34,
            NE = 35,
            EQ = 36,
            GT = 37,
            LE = 38,
            LT = 39,
            GE = 40,
            ESCAPE = 41,
            BITAND = 42,
            BITOR = 43,
            LSHIFT = 44,
            RSHIFT = 45,
            PLUS = 46,
            MINUS = 47,
            STAR = 48,
            SLASH = 49,
            REM = 50,
            CONCAT = 51,
            COLLATE = 52,
            BITNOT = 53,
            STRING = 54,
            JOIN_KW = 55,
            DROP = 56,
            SELECT = 57,
            DOT = 58,
            FROM = 59,
            JOIN = 60,
            ON = 61,
            INDEXED = 62,
            BY = 63,
            USING = 64,
            ORDER = 65,
            ASC = 66,
            DESC = 67,
            GROUP = 68,
            HAVING = 69,
            LIMIT = 70,
            OFFSET = 71,
            DELETE = 72,
            WHERE = 73,
            UPDATE = 74,
            SET = 75,
            INTO = 76,
            VALUES = 77,
            DEFAULT = 78,
            INSERT = 79,
            REPLACE = 80,
            NULL = 81,
            INTEGER = 82,
            FLOAT = 83,
            BLOB = 84,
            REGISTER = 85,
            VARIABLE = 86,
            CTIME_KW = 87,
            CASE = 88,
            WHEN = 89,
            THEN = 90,
            ELSE = 91,
            ALTER = 92,
            RENAME = 93,
            TO = 94,
            ADD = 95,
            COLUMNKW = 96,
        }
        #endregion
        #region Types: Minor
        [StructLayout(LayoutKind.Explicit)]
        public struct Minor {
            [FieldOffset(0)]
            public int yyinit;
            [FieldOffset(0)]
            public Token yy0;
            [FieldOffset(0)]
            public Int32 yy1;
            [FieldOffset(0)]
            public Select yy2;
            [FieldOffset(0)]
            public SrcList yy3;
            [FieldOffset(0)]
            public ExprList yy4;
            [FieldOffset(0)]
            public Expr yy5;
            [FieldOffset(0)]
            public LimitVal yy6;
            [FieldOffset(0)]
            public ExprSpan yy7;
            [FieldOffset(0)]
            public IdList yy8;
            [FieldOffset(0)]
            public @byte yy9;
            [FieldOffset(0)]
            public LikeOp yy10;
        }
        #endregion
        #region Types: StackEntry
        /// <summary>
        /// The following structure represents a single element of the parser's stack.  Information stored includes:
        ///  +  The state number for the parser at this level of the stack.
        ///  +  The value of the token stored at this level of the stack. (In other words, the "major" token.)
        ///  +  The semantic value stored at this level of the stack.  This is the information used by the action routines in the grammar. It is sometimes called the "minor" token.
        /// </summary>
        public struct StackEntry {
            // The state-number
            public ushort stateno;
            // The major token value.  This is the code number for the token at this stack level
            public byte major;
            // The user-supplied minor token value.  This is the value of the token
            public Minor minor;
        }
        #endregion
        #region Types: RuleInfo
        public struct RuleInfo {
            public byte LHSymbol;
            public byte RHSymbols;
            public RuleInfo(byte lhSymbol, byte rhSymbols) {
                this.LHSymbol = lhSymbol;
                this.RHSymbols = rhSymbols;
            }
        }
        #endregion
    }
}
